schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Claim {
  id: ID!
  initiate: Initiate!
  amount: BigInt!
  cohort: Cohort!
}

input Claim_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  initiate: String
  initiate_not: String
  initiate_gt: String
  initiate_lt: String
  initiate_gte: String
  initiate_lte: String
  initiate_in: [String!]
  initiate_not_in: [String!]
  initiate_contains: String
  initiate_contains_nocase: String
  initiate_not_contains: String
  initiate_not_contains_nocase: String
  initiate_starts_with: String
  initiate_starts_with_nocase: String
  initiate_not_starts_with: String
  initiate_not_starts_with_nocase: String
  initiate_ends_with: String
  initiate_ends_with_nocase: String
  initiate_not_ends_with: String
  initiate_not_ends_with_nocase: String
  initiate_: Initiate_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  cohort: String
  cohort_not: String
  cohort_gt: String
  cohort_lt: String
  cohort_gte: String
  cohort_lte: String
  cohort_in: [String!]
  cohort_not_in: [String!]
  cohort_contains: String
  cohort_contains_nocase: String
  cohort_not_contains: String
  cohort_not_contains_nocase: String
  cohort_starts_with: String
  cohort_starts_with_nocase: String
  cohort_not_starts_with: String
  cohort_not_starts_with_nocase: String
  cohort_ends_with: String
  cohort_ends_with_nocase: String
  cohort_not_ends_with: String
  cohort_not_ends_with_nocase: String
  cohort_: Cohort_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Claim_filter]
  or: [Claim_filter]
}

enum Claim_orderBy {
  id
  initiate
  initiate__id
  initiate__address
  initiate__benefactor
  initiate__sbtId
  initiate__stakeAmount
  initiate__deadline
  initiate__joinedAt
  initiate__claimed
  initiate__sacrificed
  amount
  cohort
  cohort__id
  cohort__address
  cohort__chain
  cohort__name
  cohort__deployer
  cohort__implementation
  cohort__dao
  cohort__daoTreasury
  cohort__shareThreshold
  cohort__stakeDuration
  cohort__joinEndTime
  cohort__stakingToken
  cohort__minimumStake
  cohort__sbtUrl
  cohort__createdAt
  cohort__totalMembers
  cohort__claimedMembers
  cohort__slashedMembers
  cohort__successPercentage
}

type Cohort {
  id: ID!
  address: Bytes!
  chain: String!
  name: String!
  deployer: Bytes!
  implementation: Bytes!
  dao: Bytes!
  daoTreasury: Bytes!
  shareThreshold: BigInt!
  stakeDuration: BigInt!
  joinEndTime: BigInt!
  stakingToken: Bytes!
  minimumStake: BigInt!
  sbtUrl: String!
  createdAt: BigInt!
  initiates(skip: Int = 0, first: Int = 100, orderBy: Initiate_orderBy, orderDirection: OrderDirection, where: Initiate_filter): [Initiate!]
  criesForHelp(skip: Int = 0, first: Int = 100, orderBy: CryForHelp_orderBy, orderDirection: OrderDirection, where: CryForHelp_filter): [CryForHelp!]
  claims(skip: Int = 0, first: Int = 100, orderBy: Claim_orderBy, orderDirection: OrderDirection, where: Claim_filter): [Claim!]
  Sacrifices(skip: Int = 0, first: Int = 100, orderBy: Sacrifice_orderBy, orderDirection: OrderDirection, where: Sacrifice_filter): [Sacrifice!]
  totalMembers: BigInt!
  claimedMembers: BigInt!
  slashedMembers: BigInt!
  successPercentage: BigDecimal!
}

input Cohort_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  chain: String
  chain_not: String
  chain_gt: String
  chain_lt: String
  chain_gte: String
  chain_lte: String
  chain_in: [String!]
  chain_not_in: [String!]
  chain_contains: String
  chain_contains_nocase: String
  chain_not_contains: String
  chain_not_contains_nocase: String
  chain_starts_with: String
  chain_starts_with_nocase: String
  chain_not_starts_with: String
  chain_not_starts_with_nocase: String
  chain_ends_with: String
  chain_ends_with_nocase: String
  chain_not_ends_with: String
  chain_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  deployer: Bytes
  deployer_not: Bytes
  deployer_gt: Bytes
  deployer_lt: Bytes
  deployer_gte: Bytes
  deployer_lte: Bytes
  deployer_in: [Bytes!]
  deployer_not_in: [Bytes!]
  deployer_contains: Bytes
  deployer_not_contains: Bytes
  implementation: Bytes
  implementation_not: Bytes
  implementation_gt: Bytes
  implementation_lt: Bytes
  implementation_gte: Bytes
  implementation_lte: Bytes
  implementation_in: [Bytes!]
  implementation_not_in: [Bytes!]
  implementation_contains: Bytes
  implementation_not_contains: Bytes
  dao: Bytes
  dao_not: Bytes
  dao_gt: Bytes
  dao_lt: Bytes
  dao_gte: Bytes
  dao_lte: Bytes
  dao_in: [Bytes!]
  dao_not_in: [Bytes!]
  dao_contains: Bytes
  dao_not_contains: Bytes
  daoTreasury: Bytes
  daoTreasury_not: Bytes
  daoTreasury_gt: Bytes
  daoTreasury_lt: Bytes
  daoTreasury_gte: Bytes
  daoTreasury_lte: Bytes
  daoTreasury_in: [Bytes!]
  daoTreasury_not_in: [Bytes!]
  daoTreasury_contains: Bytes
  daoTreasury_not_contains: Bytes
  shareThreshold: BigInt
  shareThreshold_not: BigInt
  shareThreshold_gt: BigInt
  shareThreshold_lt: BigInt
  shareThreshold_gte: BigInt
  shareThreshold_lte: BigInt
  shareThreshold_in: [BigInt!]
  shareThreshold_not_in: [BigInt!]
  stakeDuration: BigInt
  stakeDuration_not: BigInt
  stakeDuration_gt: BigInt
  stakeDuration_lt: BigInt
  stakeDuration_gte: BigInt
  stakeDuration_lte: BigInt
  stakeDuration_in: [BigInt!]
  stakeDuration_not_in: [BigInt!]
  joinEndTime: BigInt
  joinEndTime_not: BigInt
  joinEndTime_gt: BigInt
  joinEndTime_lt: BigInt
  joinEndTime_gte: BigInt
  joinEndTime_lte: BigInt
  joinEndTime_in: [BigInt!]
  joinEndTime_not_in: [BigInt!]
  stakingToken: Bytes
  stakingToken_not: Bytes
  stakingToken_gt: Bytes
  stakingToken_lt: Bytes
  stakingToken_gte: Bytes
  stakingToken_lte: Bytes
  stakingToken_in: [Bytes!]
  stakingToken_not_in: [Bytes!]
  stakingToken_contains: Bytes
  stakingToken_not_contains: Bytes
  minimumStake: BigInt
  minimumStake_not: BigInt
  minimumStake_gt: BigInt
  minimumStake_lt: BigInt
  minimumStake_gte: BigInt
  minimumStake_lte: BigInt
  minimumStake_in: [BigInt!]
  minimumStake_not_in: [BigInt!]
  sbtUrl: String
  sbtUrl_not: String
  sbtUrl_gt: String
  sbtUrl_lt: String
  sbtUrl_gte: String
  sbtUrl_lte: String
  sbtUrl_in: [String!]
  sbtUrl_not_in: [String!]
  sbtUrl_contains: String
  sbtUrl_contains_nocase: String
  sbtUrl_not_contains: String
  sbtUrl_not_contains_nocase: String
  sbtUrl_starts_with: String
  sbtUrl_starts_with_nocase: String
  sbtUrl_not_starts_with: String
  sbtUrl_not_starts_with_nocase: String
  sbtUrl_ends_with: String
  sbtUrl_ends_with_nocase: String
  sbtUrl_not_ends_with: String
  sbtUrl_not_ends_with_nocase: String
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  initiates_: Initiate_filter
  criesForHelp_: CryForHelp_filter
  claims_: Claim_filter
  Sacrifices_: Sacrifice_filter
  totalMembers: BigInt
  totalMembers_not: BigInt
  totalMembers_gt: BigInt
  totalMembers_lt: BigInt
  totalMembers_gte: BigInt
  totalMembers_lte: BigInt
  totalMembers_in: [BigInt!]
  totalMembers_not_in: [BigInt!]
  claimedMembers: BigInt
  claimedMembers_not: BigInt
  claimedMembers_gt: BigInt
  claimedMembers_lt: BigInt
  claimedMembers_gte: BigInt
  claimedMembers_lte: BigInt
  claimedMembers_in: [BigInt!]
  claimedMembers_not_in: [BigInt!]
  slashedMembers: BigInt
  slashedMembers_not: BigInt
  slashedMembers_gt: BigInt
  slashedMembers_lt: BigInt
  slashedMembers_gte: BigInt
  slashedMembers_lte: BigInt
  slashedMembers_in: [BigInt!]
  slashedMembers_not_in: [BigInt!]
  successPercentage: BigDecimal
  successPercentage_not: BigDecimal
  successPercentage_gt: BigDecimal
  successPercentage_lt: BigDecimal
  successPercentage_gte: BigDecimal
  successPercentage_lte: BigDecimal
  successPercentage_in: [BigDecimal!]
  successPercentage_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Cohort_filter]
  or: [Cohort_filter]
}

enum Cohort_orderBy {
  id
  address
  chain
  name
  deployer
  implementation
  dao
  daoTreasury
  shareThreshold
  stakeDuration
  joinEndTime
  stakingToken
  minimumStake
  sbtUrl
  createdAt
  initiates
  criesForHelp
  claims
  Sacrifices
  totalMembers
  claimedMembers
  slashedMembers
  successPercentage
}

type CryForHelp {
  id: ID!
  message: String!
  sender: Initiate!
  cohort: Cohort!
}

input CryForHelp_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_: Initiate_filter
  cohort: String
  cohort_not: String
  cohort_gt: String
  cohort_lt: String
  cohort_gte: String
  cohort_lte: String
  cohort_in: [String!]
  cohort_not_in: [String!]
  cohort_contains: String
  cohort_contains_nocase: String
  cohort_not_contains: String
  cohort_not_contains_nocase: String
  cohort_starts_with: String
  cohort_starts_with_nocase: String
  cohort_not_starts_with: String
  cohort_not_starts_with_nocase: String
  cohort_ends_with: String
  cohort_ends_with_nocase: String
  cohort_not_ends_with: String
  cohort_not_ends_with_nocase: String
  cohort_: Cohort_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CryForHelp_filter]
  or: [CryForHelp_filter]
}

enum CryForHelp_orderBy {
  id
  message
  sender
  sender__id
  sender__address
  sender__benefactor
  sender__sbtId
  sender__stakeAmount
  sender__deadline
  sender__joinedAt
  sender__claimed
  sender__sacrificed
  cohort
  cohort__id
  cohort__address
  cohort__chain
  cohort__name
  cohort__deployer
  cohort__implementation
  cohort__dao
  cohort__daoTreasury
  cohort__shareThreshold
  cohort__stakeDuration
  cohort__joinEndTime
  cohort__stakingToken
  cohort__minimumStake
  cohort__sbtUrl
  cohort__createdAt
  cohort__totalMembers
  cohort__claimedMembers
  cohort__slashedMembers
  cohort__successPercentage
}

type Initiate {
  id: ID!
  address: Bytes!
  benefactor: Bytes!
  sbtId: BigInt!
  stakeAmount: BigInt!
  deadline: BigInt!
  joinedAt: BigInt!
  cohort: Cohort!
  claimed: Boolean!
  claim: Claim
  sacrificed: Boolean!
  sacrifice: Sacrifice
}

input Initiate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  benefactor: Bytes
  benefactor_not: Bytes
  benefactor_gt: Bytes
  benefactor_lt: Bytes
  benefactor_gte: Bytes
  benefactor_lte: Bytes
  benefactor_in: [Bytes!]
  benefactor_not_in: [Bytes!]
  benefactor_contains: Bytes
  benefactor_not_contains: Bytes
  sbtId: BigInt
  sbtId_not: BigInt
  sbtId_gt: BigInt
  sbtId_lt: BigInt
  sbtId_gte: BigInt
  sbtId_lte: BigInt
  sbtId_in: [BigInt!]
  sbtId_not_in: [BigInt!]
  stakeAmount: BigInt
  stakeAmount_not: BigInt
  stakeAmount_gt: BigInt
  stakeAmount_lt: BigInt
  stakeAmount_gte: BigInt
  stakeAmount_lte: BigInt
  stakeAmount_in: [BigInt!]
  stakeAmount_not_in: [BigInt!]
  deadline: BigInt
  deadline_not: BigInt
  deadline_gt: BigInt
  deadline_lt: BigInt
  deadline_gte: BigInt
  deadline_lte: BigInt
  deadline_in: [BigInt!]
  deadline_not_in: [BigInt!]
  joinedAt: BigInt
  joinedAt_not: BigInt
  joinedAt_gt: BigInt
  joinedAt_lt: BigInt
  joinedAt_gte: BigInt
  joinedAt_lte: BigInt
  joinedAt_in: [BigInt!]
  joinedAt_not_in: [BigInt!]
  cohort: String
  cohort_not: String
  cohort_gt: String
  cohort_lt: String
  cohort_gte: String
  cohort_lte: String
  cohort_in: [String!]
  cohort_not_in: [String!]
  cohort_contains: String
  cohort_contains_nocase: String
  cohort_not_contains: String
  cohort_not_contains_nocase: String
  cohort_starts_with: String
  cohort_starts_with_nocase: String
  cohort_not_starts_with: String
  cohort_not_starts_with_nocase: String
  cohort_ends_with: String
  cohort_ends_with_nocase: String
  cohort_not_ends_with: String
  cohort_not_ends_with_nocase: String
  cohort_: Cohort_filter
  claimed: Boolean
  claimed_not: Boolean
  claimed_in: [Boolean!]
  claimed_not_in: [Boolean!]
  claim_: Claim_filter
  sacrificed: Boolean
  sacrificed_not: Boolean
  sacrificed_in: [Boolean!]
  sacrificed_not_in: [Boolean!]
  sacrifice_: Sacrifice_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Initiate_filter]
  or: [Initiate_filter]
}

enum Initiate_orderBy {
  id
  address
  benefactor
  sbtId
  stakeAmount
  deadline
  joinedAt
  cohort
  cohort__id
  cohort__address
  cohort__chain
  cohort__name
  cohort__deployer
  cohort__implementation
  cohort__dao
  cohort__daoTreasury
  cohort__shareThreshold
  cohort__stakeDuration
  cohort__joinEndTime
  cohort__stakingToken
  cohort__minimumStake
  cohort__sbtUrl
  cohort__createdAt
  cohort__totalMembers
  cohort__claimedMembers
  cohort__slashedMembers
  cohort__successPercentage
  claimed
  claim
  claim__id
  claim__amount
  sacrificed
  sacrifice
  sacrifice__id
  sacrifice__amount
  sacrifice__slasher
}

"""
8 bytes signed integer

"""
scalar Int8

type Metric {
  id: ID!
  totalCohorts: BigInt!
  totalMembers: BigInt!
  claimedMembers: BigInt!
  slashedMembers: BigInt!
  slashRate: BigDecimal!
  claimRate: BigDecimal!
  averageCohortSize: BigDecimal!
}

input Metric_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalCohorts: BigInt
  totalCohorts_not: BigInt
  totalCohorts_gt: BigInt
  totalCohorts_lt: BigInt
  totalCohorts_gte: BigInt
  totalCohorts_lte: BigInt
  totalCohorts_in: [BigInt!]
  totalCohorts_not_in: [BigInt!]
  totalMembers: BigInt
  totalMembers_not: BigInt
  totalMembers_gt: BigInt
  totalMembers_lt: BigInt
  totalMembers_gte: BigInt
  totalMembers_lte: BigInt
  totalMembers_in: [BigInt!]
  totalMembers_not_in: [BigInt!]
  claimedMembers: BigInt
  claimedMembers_not: BigInt
  claimedMembers_gt: BigInt
  claimedMembers_lt: BigInt
  claimedMembers_gte: BigInt
  claimedMembers_lte: BigInt
  claimedMembers_in: [BigInt!]
  claimedMembers_not_in: [BigInt!]
  slashedMembers: BigInt
  slashedMembers_not: BigInt
  slashedMembers_gt: BigInt
  slashedMembers_lt: BigInt
  slashedMembers_gte: BigInt
  slashedMembers_lte: BigInt
  slashedMembers_in: [BigInt!]
  slashedMembers_not_in: [BigInt!]
  slashRate: BigDecimal
  slashRate_not: BigDecimal
  slashRate_gt: BigDecimal
  slashRate_lt: BigDecimal
  slashRate_gte: BigDecimal
  slashRate_lte: BigDecimal
  slashRate_in: [BigDecimal!]
  slashRate_not_in: [BigDecimal!]
  claimRate: BigDecimal
  claimRate_not: BigDecimal
  claimRate_gt: BigDecimal
  claimRate_lt: BigDecimal
  claimRate_gte: BigDecimal
  claimRate_lte: BigDecimal
  claimRate_in: [BigDecimal!]
  claimRate_not_in: [BigDecimal!]
  averageCohortSize: BigDecimal
  averageCohortSize_not: BigDecimal
  averageCohortSize_gt: BigDecimal
  averageCohortSize_lt: BigDecimal
  averageCohortSize_gte: BigDecimal
  averageCohortSize_lte: BigDecimal
  averageCohortSize_in: [BigDecimal!]
  averageCohortSize_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Metric_filter]
  or: [Metric_filter]
}

enum Metric_orderBy {
  id
  totalCohorts
  totalMembers
  claimedMembers
  slashedMembers
  slashRate
  claimRate
  averageCohortSize
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  cohort(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Cohort
  cohorts(
    skip: Int = 0
    first: Int = 100
    orderBy: Cohort_orderBy
    orderDirection: OrderDirection
    where: Cohort_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Cohort!]!
  initiate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Initiate
  initiates(
    skip: Int = 0
    first: Int = 100
    orderBy: Initiate_orderBy
    orderDirection: OrderDirection
    where: Initiate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Initiate!]!
  cryForHelp(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CryForHelp
  cryForHelps(
    skip: Int = 0
    first: Int = 100
    orderBy: CryForHelp_orderBy
    orderDirection: OrderDirection
    where: CryForHelp_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CryForHelp!]!
  claim(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: Claim_orderBy
    orderDirection: OrderDirection
    where: Claim_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Claim!]!
  sacrifice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sacrifice
  sacrifices(
    skip: Int = 0
    first: Int = 100
    orderBy: Sacrifice_orderBy
    orderDirection: OrderDirection
    where: Sacrifice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sacrifice!]!
  metric(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Metric
  metrics(
    skip: Int = 0
    first: Int = 100
    orderBy: Metric_orderBy
    orderDirection: OrderDirection
    where: Metric_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Metric!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Sacrifice {
  id: ID!
  initiate: Initiate!
  amount: BigInt!
  slasher: Bytes!
  cohort: Cohort!
}

input Sacrifice_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  initiate: String
  initiate_not: String
  initiate_gt: String
  initiate_lt: String
  initiate_gte: String
  initiate_lte: String
  initiate_in: [String!]
  initiate_not_in: [String!]
  initiate_contains: String
  initiate_contains_nocase: String
  initiate_not_contains: String
  initiate_not_contains_nocase: String
  initiate_starts_with: String
  initiate_starts_with_nocase: String
  initiate_not_starts_with: String
  initiate_not_starts_with_nocase: String
  initiate_ends_with: String
  initiate_ends_with_nocase: String
  initiate_not_ends_with: String
  initiate_not_ends_with_nocase: String
  initiate_: Initiate_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  slasher: Bytes
  slasher_not: Bytes
  slasher_gt: Bytes
  slasher_lt: Bytes
  slasher_gte: Bytes
  slasher_lte: Bytes
  slasher_in: [Bytes!]
  slasher_not_in: [Bytes!]
  slasher_contains: Bytes
  slasher_not_contains: Bytes
  cohort: String
  cohort_not: String
  cohort_gt: String
  cohort_lt: String
  cohort_gte: String
  cohort_lte: String
  cohort_in: [String!]
  cohort_not_in: [String!]
  cohort_contains: String
  cohort_contains_nocase: String
  cohort_not_contains: String
  cohort_not_contains_nocase: String
  cohort_starts_with: String
  cohort_starts_with_nocase: String
  cohort_not_starts_with: String
  cohort_not_starts_with_nocase: String
  cohort_ends_with: String
  cohort_ends_with_nocase: String
  cohort_not_ends_with: String
  cohort_not_ends_with_nocase: String
  cohort_: Cohort_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Sacrifice_filter]
  or: [Sacrifice_filter]
}

enum Sacrifice_orderBy {
  id
  initiate
  initiate__id
  initiate__address
  initiate__benefactor
  initiate__sbtId
  initiate__stakeAmount
  initiate__deadline
  initiate__joinedAt
  initiate__claimed
  initiate__sacrificed
  amount
  slasher
  cohort
  cohort__id
  cohort__address
  cohort__chain
  cohort__name
  cohort__deployer
  cohort__implementation
  cohort__dao
  cohort__daoTreasury
  cohort__shareThreshold
  cohort__stakeDuration
  cohort__joinEndTime
  cohort__stakingToken
  cohort__minimumStake
  cohort__sbtUrl
  cohort__createdAt
  cohort__totalMembers
  cohort__claimedMembers
  cohort__slashedMembers
  cohort__successPercentage
}

type Subscription {
  cohort(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Cohort
  cohorts(
    skip: Int = 0
    first: Int = 100
    orderBy: Cohort_orderBy
    orderDirection: OrderDirection
    where: Cohort_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Cohort!]!
  initiate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Initiate
  initiates(
    skip: Int = 0
    first: Int = 100
    orderBy: Initiate_orderBy
    orderDirection: OrderDirection
    where: Initiate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Initiate!]!
  cryForHelp(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CryForHelp
  cryForHelps(
    skip: Int = 0
    first: Int = 100
    orderBy: CryForHelp_orderBy
    orderDirection: OrderDirection
    where: CryForHelp_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CryForHelp!]!
  claim(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: Claim_orderBy
    orderDirection: OrderDirection
    where: Claim_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Claim!]!
  sacrifice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sacrifice
  sacrifices(
    skip: Int = 0
    first: Int = 100
    orderBy: Sacrifice_orderBy
    orderDirection: OrderDirection
    where: Sacrifice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sacrifice!]!
  metric(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Metric
  metrics(
    skip: Int = 0
    first: Int = 100
    orderBy: Metric_orderBy
    orderDirection: OrderDirection
    where: Metric_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Metric!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}